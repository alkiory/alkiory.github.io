---
const { lang } = Astro.props;
const currentLang = lang as "es" | "en";
const otherLang = currentLang === "es" ? "en" : "es";

// Función para construir la URL del otro idioma
const getOtherLangUrl = (targetLang: string, currentPath: string) => {
  const cleanPath = currentPath.startsWith("/")
    ? currentPath.substring(1)
    : currentPath;
  const parts = cleanPath.split("/");

  // Si la ruta ya tiene el idioma, lo reemplazamos
  if (parts.length > 0 && (parts[0] === "es" || parts[0] === "en")) {
    parts[0] = targetLang;
  } else {
    // Si no tiene idioma (ej. /), añadirlo
    parts.unshift(targetLang);
  }
  return `/${parts.join("/")}`;
};

const otherLangUrl = getOtherLangUrl(otherLang, Astro.url.pathname);
---

<a href={otherLangUrl} class="lang-switcher-button">
  {otherLang.toUpperCase()}
</a>

<style>
  .lang-switcher-button {
    display: flex;
    align-items: center;
    justify-content: center;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem 1rem;
    background-color: var(--accent-regular);
    box-shadow: inset 0 0 0 1px var(--accent-overlay);
    cursor: pointer;
    text-decoration: none;
    color: var(--accent-text-over);
    font-weight: bold;
    outline: 1px solid transparent;

    transition:
      background-color var(--theme-transition),
      box-shadow var(--theme-transition),
      color var(--theme-transition);
  }

  .lang-switcher-button:hover,
  .lang-switcher-button:focus {
    background-color: var(--accent-regular);
    box-shadow: inset 0 0 0 1px var(--accent-regular);
    color: var(--accent-light);
  }

  @media (prefers-reduced-motion: no-preference) {
    .lang-switcher-button {
      transition:
        background-color var(--theme-transition),
        box-shadow var(--theme-transition),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .lang-switcher-button {
      background-color: transparent;
      border: 1px solid SelectedItem;
      color: SelectedItem;
    }
  }
</style>
